/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.unab.edu.sv.Formularios;

import com.unab.edu.sv.DAO.ClsPeliculas;
import com.unab.edu.sv.Entidades.Peliculas;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Time;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.naming.ldap.Rdn;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author 14-ck0013lab
 */
public class frmPeliculas extends javax.swing.JFrame {

    /**
     * Creates new form frmPeliculas
     */
    public frmPeliculas() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        txtSinopsis.setLineWrap(true);
        txtSinopsis.setWrapStyleWord(true);
        cargarcomboshora();

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(frmPeliculas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void cargarcomboshora() {
        DefaultComboBoxModel hora = new DefaultComboBoxModel();
        hora.addElement("0");
        for (int i = 1; i < 6; i++) {
            hora.addElement(i);
        }
        horas.setModel(hora);
        DefaultComboBoxModel minuto = new DefaultComboBoxModel();
        minuto.addElement("0");
        for (int i = 1; i < 61; i++) {
            minuto.addElement(i);
        }
        minutos.setModel(minuto);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tipo = new javax.swing.ButtonGroup();
        Clasificacion = new javax.swing.ButtonGroup();
        panelFondo = new javax.swing.JPanel();
        lblEncabezado = new javax.swing.JLabel();
        lblPelicula = new javax.swing.JLabel();
        txtNombreP = new javax.swing.JTextField();
        lblYear = new javax.swing.JLabel();
        lblDuracion = new javax.swing.JLabel();
        lblSinopsis = new javax.swing.JLabel();
        rb3D = new javax.swing.JRadioButton();
        rb2D = new javax.swing.JRadioButton();
        rbTodos = new javax.swing.JRadioButton();
        rbMayoresde15 = new javax.swing.JRadioButton();
        txtSeleccionar = new javax.swing.JTextField();
        btnSeleccionar = new javax.swing.JButton();
        btnInsertar = new javax.swing.JButton();
        javax.swing.JButton btnLimpiar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jdcAnio = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSinopsis = new javax.swing.JTextArea();
        lblPortada = new javax.swing.JLabel();
        lblImagen = new javax.swing.JLabel();
        rbMayoresde18 = new javax.swing.JRadioButton();
        horas = new javax.swing.JComboBox<>();
        minutos = new javax.swing.JComboBox<>();
        lblHoras = new javax.swing.JLabel();
        lblMinutos = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelFondo.setBackground(new java.awt.Color(0, 0, 0));
        panelFondo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblEncabezado.setBackground(new java.awt.Color(0, 0, 0));
        lblEncabezado.setFont(new java.awt.Font("Algerian", 0, 48)); // NOI18N
        lblEncabezado.setForeground(new java.awt.Color(255, 255, 255));
        lblEncabezado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEncabezado.setText("PELICULAS");
        panelFondo.add(lblEncabezado, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 654, 70));

        lblPelicula.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblPelicula.setForeground(new java.awt.Color(255, 255, 255));
        lblPelicula.setText("Pelicula");
        panelFondo.add(lblPelicula, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 115, -1, -1));

        txtNombreP.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtNombreP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombrePActionPerformed(evt);
            }
        });
        panelFondo.add(txtNombreP, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 133, 320, -1));

        lblYear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblYear.setForeground(new java.awt.Color(255, 255, 255));
        lblYear.setText("Fecha de estreno");
        panelFondo.add(lblYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, -1, -1));

        lblDuracion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblDuracion.setForeground(new java.awt.Color(255, 255, 255));
        lblDuracion.setText("Duracion");
        panelFondo.add(lblDuracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 270, -1, -1));

        lblSinopsis.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSinopsis.setForeground(new java.awt.Color(255, 255, 255));
        lblSinopsis.setText("Sinopsis");
        panelFondo.add(lblSinopsis, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 360, -1, -1));

        rb3D.setBackground(new java.awt.Color(0, 0, 0));
        Tipo.add(rb3D);
        rb3D.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rb3D.setForeground(new java.awt.Color(255, 255, 255));
        rb3D.setText("3D");
        panelFondo.add(rb3D, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 490, -1, -1));

        rb2D.setBackground(new java.awt.Color(0, 0, 0));
        Tipo.add(rb2D);
        rb2D.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rb2D.setForeground(new java.awt.Color(255, 255, 255));
        rb2D.setText("2D");
        panelFondo.add(rb2D, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 490, -1, -1));

        rbTodos.setBackground(new java.awt.Color(0, 0, 0));
        Clasificacion.add(rbTodos);
        rbTodos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbTodos.setForeground(new java.awt.Color(255, 255, 255));
        rbTodos.setText("Toda la Familia");
        panelFondo.add(rbTodos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, -1, -1));

        rbMayoresde15.setBackground(new java.awt.Color(0, 0, 0));
        Clasificacion.add(rbMayoresde15);
        rbMayoresde15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbMayoresde15.setForeground(new java.awt.Color(255, 255, 255));
        rbMayoresde15.setText("Mayores de 15 a√±os");
        panelFondo.add(rbMayoresde15, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 530, -1, -1));

        txtSeleccionar.setEditable(false);
        txtSeleccionar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        panelFondo.add(txtSeleccionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 186, 201, -1));

        btnSeleccionar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSeleccionar.setText("Seleccionar");
        btnSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarActionPerformed(evt);
            }
        });
        panelFondo.add(btnSeleccionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(229, 185, -1, -1));

        btnInsertar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnInsertar.setText("Guardar");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });
        panelFondo.add(btnInsertar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 580, -1, -1));

        btnLimpiar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        panelFondo.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 580, -1, -1));

        btnEliminar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        panelFondo.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 580, -1, -1));

        jdcAnio.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        panelFondo.add(jdcAnio, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 239, 320, -1));

        txtSinopsis.setColumns(20);
        txtSinopsis.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSinopsis.setRows(5);
        jScrollPane1.setViewportView(txtSinopsis);

        panelFondo.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 320, -1));

        lblPortada.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblPortada.setForeground(new java.awt.Color(255, 255, 255));
        lblPortada.setText("portada");
        panelFondo.add(lblPortada, new org.netbeans.lib.awtextra.AbsoluteConstraints(133, 162, -1, -1));

        lblImagen.setBackground(new java.awt.Color(0, 0, 0));
        lblImagen.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        panelFondo.add(lblImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 115, 260, 347));

        rbMayoresde18.setBackground(new java.awt.Color(0, 0, 0));
        Clasificacion.add(rbMayoresde18);
        rbMayoresde18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbMayoresde18.setForeground(new java.awt.Color(255, 255, 255));
        rbMayoresde18.setText("Mayores de 18 a√±os");
        panelFondo.add(rbMayoresde18, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 530, -1, -1));

        horas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        panelFondo.add(horas, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 310, 70, -1));

        minutos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        panelFondo.add(minutos, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 310, 70, -1));

        lblHoras.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblHoras.setForeground(new java.awt.Color(255, 255, 255));
        lblHoras.setText("Horas");
        panelFondo.add(lblHoras, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, -1, -1));

        lblMinutos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblMinutos.setForeground(new java.awt.Color(255, 255, 255));
        lblMinutos.setText("Minutos");
        panelFondo.add(lblMinutos, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 290, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public int identificador = 0;
    int pelicula = 0;
    int id;
    public byte[] pelic;

    public ArrayList<Peliculas> pel;
    byte[] imagen;
    SimpleDateFormat formatohora = new SimpleDateFormat("hh:mm:ss");

    public void cargartextbox() throws IOException {
        String hora;
        String horass;
        String Minuto;
        String Minutoss;
        for (var i : pel) {
           hora=String.valueOf(i.getDuracion());
           horass = hora.substring(0,3);
           Minuto = String.valueOf(i.getDuracion());
           Minutoss = Minuto.substring(3,5);
           horas.setSelectedIndex(Integer.valueOf(horass));
            txtNombreP.setText(i.getNombre());
            txtSinopsis.setText(i.getSipnosis());
            if (i.getTipo() == 0) {
                rb2D.setSelected(true);
            } else {
                rb3D.setSelected(true);
            }
            if (i.getClasificacion() == 0) {
                rbTodos.setSelected(true);
            } else if (i.getTipo() == 1) {
                rbMayoresde15.setSelected(true);
            } else {
                rbMayoresde18.setSelected(true);
            }
            jdcAnio.setDate(i.getYear());
            try {
                imagen = i.getPortada();
                BufferedImage image = null;
                InputStream input = new ByteArrayInputStream(imagen);
                image = ImageIO.read(input);
                ImageIcon imag = new ImageIcon(image.getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), image.SCALE_DEFAULT));
                lblImagen.setIcon(imag);

            } catch (Exception e) {
            }
            id = i.getIdPelicula();
        }
    }

    public void Limpiar() {
        identificador = 0;
        // txtDuracion.setText(null);
        txtNombreP.setText(null);
        txtSeleccionar.setText(null);
        txtSinopsis.setText(null);
        jdcAnio.setDate(null);
        identificador = 0;
        pelicula = 0;
        imagen = null;
        pelic = null;
        rb2D.setSelected(false);
        rb3D.setSelected(false);
        rbMayoresde15.setSelected(false);
        rbMayoresde18.setSelected(false);
        rbTodos.setSelected(false);
        id = 0;
        lblImagen.setIcon(null);
    }

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        radiobutton();
        int min = Integer.valueOf(minutos.getSelectedIndex());
        int hor = Integer.valueOf(horas.getSelectedIndex());
        byte[] icono = null;

        if (identificador == 0) {
            try {
                File ruta = new File(txtSeleccionar.getText());
                icono = new byte[(int) ruta.length()];
                InputStream input = new FileInputStream(ruta);
                input.read(icono);

            } catch (Exception ex) {

                System.out.println(ex);
            }
            if (txtNombreP.getText() == null || txtNombreP.getText() == "" || txtNombreP.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Debe de asignar un nombre");
                txtNombreP.requestFocus();
            } else {
                if (jdcAnio.getDate() == null || String.valueOf(jdcAnio.getDate()) == "" || String.valueOf(jdcAnio.getDate()).isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Debe asignar un a√±o");
                    jdcAnio.requestFocus();
                } else {
                    if (min == 0&&hor==0) {
                        JOptionPane.showMessageDialog(null, "Debe de asignar una duracion");
                        minutos.requestFocus();
                    } else {
                        if (txtSinopsis.getText() == null || txtSinopsis.getText() == "" || txtSinopsis.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Debe de agregar una sinopsisi a la pelicula");
                            txtSinopsis.requestFocus();
                        } else {
                            if (tipo == 2) {
                                JOptionPane.showMessageDialog(null, "Debe de asignar el tipo de pelicula");
                                rb3D.requestFocus();
                            } else {
                                if (clasificacion == 3) {
                                    JOptionPane.showMessageDialog(null, "Debe de asignar una clasificacion a la pelicula");
                                    rbTodos.requestFocus();
                                } else {
                                    if (icono.length == 0) {
                                        JOptionPane.showMessageDialog(null, "Debe asignar una imagen");
                                    } else {
                                        String hora = String.valueOf(horas.getSelectedIndex() + ":" + minutos.getSelectedIndex());
                                        Peliculas peli = new Peliculas();
                                        peli.setNombre(txtNombreP.getText());
                                        peli.setPortada(icono);
                                        peli.setDuracion(Time.valueOf(hora + ":00"));
                                        peli.setTipo(tipo);
                                        peli.setClasificacion(clasificacion);
                                        peli.setSipnosis(txtSinopsis.getText());
                                        peli.setYear(jdcAnio.getDate());
                                        ClsPeliculas cls = new ClsPeliculas();
                                        cls.InsertarPelicula(peli);
                                        frmPrincipal f = new frmPrincipal();
                                        f.pelicula.cargartabla();
                                        f.pelicula.ajustartabla();
                                        System.out.println(peli.getDuracion());

                                        Limpiar();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if (txtNombreP.getText() == null || txtNombreP.getText() == "" || txtNombreP.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Debe de asignar un nombre");
                txtNombreP.requestFocus();
            } else {
                if (jdcAnio.getDate() == null || String.valueOf(jdcAnio.getDate()) == "" || String.valueOf(jdcAnio.getDate()).isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Debe asignar un a√±o");
                    jdcAnio.requestFocus();
                } else {

                    {
                        if (txtSinopsis.getText() == null || txtSinopsis.getText() == "" || txtSinopsis.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Debe de agregar una sinopsisi a la pelicula");
                            txtSinopsis.requestFocus();
                        } else {
                            if (tipo == 2) {
                                JOptionPane.showMessageDialog(null, "Debe de asignar el tipo de pelicula");
                                rb3D.requestFocus();
                            } else {
                                if (clasificacion == 3) {
                                    JOptionPane.showMessageDialog(null, "Debe de asignar una clasificacion a la pelicula");
                                    rbTodos.requestFocus();
                                } else {
                                    if (pelicula == 0) {

                                        Peliculas pelic = new Peliculas();
                                        pelic.setIdPelicula(id);
                                        pelic.setNombre(txtNombreP.getText());
                                        for (var i : pel) {
                                            pelic.setPortada(i.getPortada());
                                        }
                                        pelic.setDuracion(Time.valueOf(hor + ":00"));
                                        pelic.setTipo(tipo);
                                        pelic.setClasificacion(clasificacion);
                                        pelic.setSipnosis(txtSinopsis.getText());
                                        pelic.setYear(jdcAnio.getDate());
                                        ClsPeliculas cls = new ClsPeliculas();
                                        cls.ActualizarPelicula(pelic);
                                        frmPrincipal f = new frmPrincipal();
                                        f.pelicula.cargartabla();
                                        f.pelicula.ajustartabla();

                                    } else {
                                        try {
                                            File ruta = new File(txtSeleccionar.getText());
                                            icono = new byte[(int) ruta.length()];
                                            InputStream input = new FileInputStream(ruta);
                                            input.read(icono);

                                        } catch (Exception ex) {

                                            System.out.println(ex);
                                        }
                                        Peliculas pelic = new Peliculas();
                                        pelic.setIdPelicula(id);
                                        pelic.setNombre(txtNombreP.getText());
                                        pelic.setPortada(icono);
                                        pelic.setDuracion(Time.valueOf(hor + ":00"));
                                        pelic.setTipo(tipo);
                                        pelic.setClasificacion(clasificacion);
                                        pelic.setSipnosis(txtSinopsis.getText());
                                        pelic.setYear(jdcAnio.getDate());
                                        ClsPeliculas cls = new ClsPeliculas();
                                        cls.ActualizarPelicula(pelic);
                                        frmPrincipal f = new frmPrincipal();
                                        f.pelicula.cargartabla();
                                        f.pelicula.ajustartabla();

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_btnInsertarActionPerformed
    public void nuevoActualizarOeliminar(int i) {
        if (i == 0) {
            btnEliminar.hide();
            btnInsertar.show();
        } else {
            btnEliminar.show();
            btnInsertar.hide();
        }

    }


    private void btnSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarActionPerformed
        // TODO add your handling code here:
        JFileChooser j = new JFileChooser();
        j.setDialogTitle("Buscar Imagen");
        FileNameExtensionFilter fil = new FileNameExtensionFilter("JPG & PNG", "jpg", "png");
        j.setFileFilter(fil);
        int s = j.showOpenDialog(null);
        if (s == JFileChooser.APPROVE_OPTION) {
            String ruta = j.getSelectedFile().getAbsolutePath();
            txtSeleccionar.setText(ruta);
            ImageIcon im = new ImageIcon(ruta);
            Icon icono = new ImageIcon(im.getImage().getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_DEFAULT));
            lblImagen.setIcon(icono);
        }
        pelicula = 1;
    }//GEN-LAST:event_btnSeleccionarActionPerformed

    private void txtNombrePActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombrePActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombrePActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        Limpiar();
        String hora = String.valueOf(horas.getSelectedIndex() + ":" + minutos.getSelectedIndex());

        Time time = Time.valueOf(hora + ":00");
        System.out.println(time);

    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        Peliculas peli = new Peliculas();
        peli.setIdPelicula(id);
        ClsPeliculas cls = new ClsPeliculas();
        cls.eliminar(peli);
        frmPrincipal f = new frmPrincipal();
        f.pelicula.cargartabla();
        f.pelicula.ajustartabla();
        Limpiar();
    }//GEN-LAST:event_btnEliminarActionPerformed
    int clasificacion;
    int tipo;

    void radiobutton() {
        //
        if (rb2D.isSelected()) {
            tipo = 0;
        } else if (rb3D.isSelected()) {
            tipo = 1;
        } else {
            tipo = 2;
        }
        if (rbTodos.isSelected()) {
            clasificacion = 0;
        } else if (rbMayoresde15.isSelected()) {
            clasificacion = 1;
        } else if (rbMayoresde18.isSelected()) {
            clasificacion = 2;
        } else {
            clasificacion = 3;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPeliculas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPeliculas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPeliculas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPeliculas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPeliculas().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Clasificacion;
    private javax.swing.ButtonGroup Tipo;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnSeleccionar;
    private javax.swing.JComboBox<String> horas;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdcAnio;
    private javax.swing.JLabel lblDuracion;
    private javax.swing.JLabel lblEncabezado;
    private javax.swing.JLabel lblHoras;
    public javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblMinutos;
    private javax.swing.JLabel lblPelicula;
    private javax.swing.JLabel lblPortada;
    private javax.swing.JLabel lblSinopsis;
    private javax.swing.JLabel lblYear;
    private javax.swing.JComboBox<String> minutos;
    private javax.swing.JPanel panelFondo;
    private javax.swing.JRadioButton rb2D;
    private javax.swing.JRadioButton rb3D;
    private javax.swing.JRadioButton rbMayoresde15;
    private javax.swing.JRadioButton rbMayoresde18;
    private javax.swing.JRadioButton rbTodos;
    private javax.swing.JTextField txtNombreP;
    private javax.swing.JTextField txtSeleccionar;
    private javax.swing.JTextArea txtSinopsis;
    // End of variables declaration//GEN-END:variables
}
